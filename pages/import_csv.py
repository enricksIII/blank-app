import streamlit as st
import pandas as pd
import os
from datetime import datetime
from utils import (
    get_templates_from_folder,
    initialize_google_clients,
    save_placeholders,
    fetch_placeholders,
    load_placeholders,
    create_contract_on_google_docs,
)

# Initialize Google API clients
SCOPES = ['https://www.googleapis.com/auth/drive', 'https://www.googleapis.com/auth/documents']
SERVICE_ACCOUNT_JSON = os.getenv('SERVICE_ACCOUNT_JSON')
TEMPLATE_FOLDER_ID = os.getenv('TEMPLATE_FOLDER_ID')

docs_service, drive_service = initialize_google_clients(SERVICE_ACCOUNT_JSON, SCOPES)

# Title
st.title("Import CSV for Contract Generation")

# Fetch templates for dropdown
templates = get_templates_from_folder(drive_service, TEMPLATE_FOLDER_ID)
selected_template = st.selectbox("Select a template", options=["Select a template"] + list(templates.keys()))

if selected_template != "Select a template":
    # Initialize placeholders for the selected template
    doc_id = templates[selected_template]
    placeholders = load_placeholders("placeholders.json", doc_id)
    if not placeholders:
        placeholders = fetch_placeholders(doc_id, docs_service)
        save_placeholders("placeholders.json", placeholders, doc_id)

    # File upload section
    uploaded_file = st.file_uploader("Upload a CSV file", type="csv")

    if uploaded_file:
        df = pd.read_csv(uploaded_file, dtype=str).fillna("")
        if "row_index" not in st.session_state:
            st.session_state.row_index = 0
        if "clean_data" not in st.session_state:
            st.session_state.clean_data = []

        current_index = st.session_state.row_index
        if current_index < len(df):
            # Edit the current row
            current_row = df.iloc[current_index].to_dict()
            st.subheader(f"Editing Row {current_index + 1} of {len(df)}")
            with st.form(key=f"form_row_{current_index}"):
                # Dynamically generate form fields for placeholders
                edited_row = {ph: st.text_input(ph.replace("_", " ").title(), value=current_row.get(ph, "")) for ph in placeholders if ph != "legal_description"}
                edited_row["legal_description"] = st.text_area("Legal Description", value=current_row.get("legal_description", ""))
                if st.form_submit_button("Save and Next"):
                    # Save the edited data and move to the next row
                    if all(value.strip() for value in edited_row.values()):
                        st.session_state.clean_data.append(edited_row)
                        st.session_state.row_index += 1
                    else:
                        st.error("All fields are required.")

        else:
            # Generate contracts once all rows are edited
            st.success("All rows edited. Ready to generate contracts.")
            if st.button("Generate Contracts"):
                folder_id = drive_service.files().create(
                    body={
                        'name': f"[AUTOGENERATED]_{datetime.now().strftime('%Y-%m-%d_%H-%M-%S')}",
                        'mimeType': 'application/vnd.google-apps.folder',
                        'parents': [TEMPLATE_FOLDER_ID],
                    }
                ).execute()['id']

                progress = st.progress(0)
                for idx, row in enumerate(st.session_state.clean_data):
                    create_contract_on_google_docs(drive_service, docs_service, folder_id, doc_id, placeholders, row)
                    progress.progress((idx + 1) / len(st.session_state.clean_data))
                st.success(f"Contracts saved in folder: [Open in Google Drive](https://drive.google.com/drive/folders/{folder_id})")

        # Reset data button
        if st.button("Reset Data"):
            st.session_state.row_index = 0
            st.session_state.clean_data = []
            st.info("Data reset successfully!")